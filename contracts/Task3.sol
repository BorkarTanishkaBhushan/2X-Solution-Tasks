// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";
import "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol";


/**
 * @title Task3 - OddEvenGame
 * @dev A contract for playing the Odd-Even game using Chainlink's VRF (Verifiable Random Function).
 */ 
contract OddEvenGame is VRFConsumerBaseV2, ConfirmedOwner {


    /// The key hash used to make the Chainlink VRF request.
    bytes32 keyHash = 0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f;
    /// The amount of participation fee required from each bettor.
    uint participationFee = 0.01 ether;
    /// The total amount of bets placed on the odd outcome.
    uint totalOddBetAmt;
    /// The total amount of bets placed on the even outcome.
    uint totalEvenBetAmt;
    /// The subscription ID used for Chainlink VRF.
    uint64 s_subscriptionId;
    /// The address of the contract owner.
    address s_owner;
    /// The number of random words requested from Chainlink VRF.
    uint32 numWords = 2;
    /// The gas limit for the VRF callback function.
    uint32 callbackGasLimit = 100000;
    /// The number of confirmations required for a VRF request.
    uint16 requestConfirmations = 3;
    /// A boolean indicating whether the betting process is open or closed.
    bool betOpen;
    /// The request ID generated for the Chainlink VRF request.
    uint256 public s_requestId;
    /// An array to store the random words generated by Chainlink VRF.
    uint256[] public s_randomWords;
    /// An array to store the addresses of the bettors.
    address[] bettors;
    /**
    * @dev A mapping to store the amount bet by each bettor.
    * Key: Address of the bettor
    * Value: Amount bet by the bettor
    */
    mapping(address => uint) bet;
    /// An array to store the addresses of the bettors who bet on the odd outcome.
    address[] odd;
    /// An array to store the addresses of the bettors who bet on the even outcome.
    address[] even;
    /// The interface to interact with the Chainlink VRFCoordinatorV2 contract.
    VRFCoordinatorV2Interface COORDINATOR;
    /// Event emitted when a new bettor is registered.
    event BettorRegistered(address bettor);
    /// Enum representing the two choices for betting: ODD and EVEN.
    enum BetChoice{ ODD, EVEN }



    /**
    * @notice Constructor inherits VRFConsumerBaseV2
    * @dev NETWORK: Sepolia
    * @dev Starts the betting process
    * @param subscriptionId Subscription id that this consumer contract can use
    */
    constructor(uint64 subscriptionId)VRFConsumerBaseV2(0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625) ConfirmedOwner(msg.sender)
    {
        COORDINATOR = VRFCoordinatorV2Interface(
            0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed
        );
        betOpen = true;
        s_owner = msg.sender;
        s_subscriptionId = subscriptionId;
    }


    /**
    * @notice Request a random word from chainlink
    * @dev Uses the requestId and all other constants required for chainlink vrf
    * @return requestId The generated requestId for the request.
    */
    function requestRandomWords() external onlyOwner returns (uint256 requestId){
        s_requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        return requestId;
    }


    /**
    * @dev The random word generated by chainlinkvrf
    * @param _randomWords Array which contains teh randomword generated
    */
    function fulfillRandomWords(
        uint256 /*_requestId*/,
        uint256[] memory _randomWords
    ) internal override {
        s_randomWords[0] = _randomWords[0];
    }


    /**
    * @notice New participants are registered
    * @dev Register the new bettors
    */    
    function bettorRegister() external payable {
        // require(block.timestamp >= betStart || block.timestamp <= betEnd, "Betting Closed");
        require(betOpen, "Betting Closed");
        for(uint i; i < bettors.length; ++i){
            require(bettors[i] != msg.sender, "You have already registered");
        }
        require(msg.value == participationFee, "Participation fee is 1 ether");
        bettors.push(msg.sender);
        emit BettorRegistered(msg.sender);
        //console.log(address(this).balance)
    }

    
    /**
    * @notice Place bet for the outcome
    * @dev Records the bet of a bettor
    * @param choice the outcome guessed by the bettor from enum BetChoice
    */
    function placebet(BetChoice choice) public payable{
        // require(block.timestamp >= betStart || block.timestamp <= betEnd, "Betting Closed");
        require(betOpen, "Betting Closed");
        require(bet[msg.sender] == 0, "You have already placed a bet");
        require(msg.value > 0, "Bet should be greater than zero");

        bet[msg.sender] = msg.value;
        
        if(choice == BetChoice.ODD){
            odd.push(msg.sender);
            totalOddBetAmt = msg.value;
        }
        else{
            even.push(msg.sender);
            totalEvenBetAmt = msg.value;
        }
    }


    /**
    * @notice End of the betting process
    * @dev Stops the betting process
    * @dev Calculates whether the random number generated by Chainlinks is even or odd
    * @return randomNumber Indicates whether the random number is even or odd
    */
    function betResult() public onlyOwner returns(BetChoice randomNumber) {
        betOpen = false;
        if(s_randomWords[0] % 2 == 0){
            randomNumber = BetChoice.EVEN;
        }
        else{
            randomNumber = BetChoice.ODD;
        }

        afterResult(randomNumber);
    }


    /**
    * @notice Chooses the winners
    * @dev Distributes the participation fee to all the bettors
    * @dev Distributes the rewards to the winners
    * @param randomNumber Store the enum equivalent of the randomNumber generated
    */
    function afterResult(BetChoice randomNumber) public {
        require(!betOpen, "Results are not yet declared");
        uint totalBettors = bettors.length;
        uint totalBetAmt = totalOddBetAmt + totalEvenBetAmt;
        uint winners;

        for (uint i = 0; i < totalBettors; ++i) {
            (bool sent, ) = bettors[i].call{value: participationFee}("");
            require(sent, "Failed to transfer participation fee");
        }

        if (randomNumber == BetChoice.ODD) {
            winners = odd.length;
            uint totalWinningAmount = 0;
            uint[] memory winnerAmounts = new uint[](winners);

            for (uint i = 0; i < winners; ++i) {
                uint winnerPercentage = (bet[odd[i]] * 100) / totalOddBetAmt;
                uint winnerAmount = (totalBetAmt * winnerPercentage) / 100;
                winnerAmounts[i] = winnerAmount;
                totalWinningAmount += winnerAmount;
            }

            // Distribute the prize to winners
            for (uint i = 0; i < winners; ++i) {
                (bool sent, ) = odd[i].call{value: winnerAmounts[i]}("");
                require(sent, "Failed to transfer winner prize");
            }

            // Distribute any remaining amount (due to rounding errors) to the first winner
            uint remainingAmount = totalBetAmt - totalWinningAmount;
            (bool sent, ) = odd[0].call{value: remainingAmount}("");
            require(sent, "Failed to transfer remaining amount");
        } 
        else {
            winners = even.length;
            uint totalWinningAmount = 0;
            uint[] memory winnerAmounts = new uint[](winners);

            for (uint i = 0; i < winners; ++i) {
                uint winnerPercentage = (bet[even[i]] * 100) / totalEvenBetAmt;
                uint winnerAmount = (totalBetAmt * winnerPercentage) / 100;
                winnerAmounts[i] = winnerAmount;
                totalWinningAmount += winnerAmount;
            }

            // Distribute the prize to winners
            for (uint i = 0; i < winners; ++i) {
                (bool sent, ) = even[i].call{value: winnerAmounts[i]}("");
                require(sent, "Failed to transfer winner prize");
            }

            // Distribute any remaining amount (due to rounding errors) to the first winner
            uint remainingAmount = totalBetAmt - totalWinningAmount;
            (bool sent, ) = even[0].call{value: remainingAmount}("");
            require(sent, "Failed to transfer remaining amount");
        }
    }


}


